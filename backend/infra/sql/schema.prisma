generator kysely {
    provider            = "prisma-kysely"
    previewFeatures     = ["views"]
    output              = "./kysely"
    fileName            = "types.ts"
    decimalTypeOverride = "number"
    jsonTypeOverride    = "Record<string,any>"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model LiteraryWork {
    id          BigInt                @id @default(dbgenerated("generate_tsid('LiteraryWork')"))
    title       Json                  @db.JsonB // { "languageCode": string[] }
    synopsis    Json?                 @db.JsonB // { "languageCode": string }
    type        String                @db.VarChar(16)
    tags        String[]              @db.VarChar(30)
    releaseDate DateTime?             @db.Date
    averageTime Int?                  @db.SmallInt
    ongoing     Boolean               @default(true) @db.Boolean
    chapters    LiteraryWorkChapter[]
    createdAt   DateTime              @default(now())
    updatedAt   DateTime              @default(now())
}

model LiteraryWorkChapter {
    id          BigInt        @id @default(dbgenerated("generate_tsid('LiteraryWorkChapter')"))
    title       Json?         @db.JsonB // { "languageCode": string }
    number      Decimal       @db.Decimal(6, 1)
    releaseDate DateTime?     @db.Date
    pages       Int?          @db.SmallInt
    averageTime Int?          @db.SmallInt
    sourceId    BigInt
    source      LiteraryWork  @relation(fields: [sourceId], references: [id], onDelete: Cascade)
    readBy      UserChapter[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @default(now())

    @@unique([sourceId, number])
}

view EntertainmentMedia {
    id          BigInt    @unique
    title       Json      @db.JsonB // { "languageCode": string[] }
    releaseDate DateTime? @db.Date
    category    String    @db.Text
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @default(now())
}

model Movie {
    id          BigInt      @id @default(dbgenerated("generate_tsid('Movie')"))
    title       Json        @db.JsonB // { "languageCode": string[] }
    duration    Int?
    releaseDate DateTime?   @db.Date
    watchedBy   UserMovie[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @default(now())
}

model User {
    id               BigInt          @id @default(dbgenerated("generate_tsid('User')"))
    email            String          @unique @db.VarChar(320)
    password         String          @db.VarChar(128)
    chaptersRead     UserChapter[]
    moviesWatched    UserMovie[]
    videosWatched    UserVideo[]
    videoGamesPlayed UserVideoGame[]
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @default(now())
}

model UserChapter {
    id         BigInt              @id @default(dbgenerated("generate_tsid('UserChapter')"))
    userId     BigInt
    user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    chapterId  BigInt
    chapter    LiteraryWorkChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    when       DateTime?           @db.Timestamptz(0)
    timeSpent  Int?                @db.SmallInt
    bookmarked Boolean             @default(false)
}

model UserMovie {
    id         BigInt    @id @default(dbgenerated("generate_tsid('UserMovie')"))
    userId     BigInt
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    movieId    BigInt
    movie      Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
    when       DateTime? @db.Timestamptz(0)
    rating     Decimal?  @db.Decimal(3, 1)
    bookmarked Boolean   @default(false)
}

model UserVideo {
    id         BigInt    @id @default(dbgenerated("generate_tsid('UserVideo')"))
    userId     BigInt
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    videoId    BigInt
    video      Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
    when       DateTime? @db.Timestamptz(0)
    timeSpent  BigInt?
    bookmarked Boolean   @default(false)
}

model UserVideoGame {
    userId      BigInt
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    videoGameId BigInt
    videoGame   VideoGame @relation(fields: [videoGameId], references: [id], onDelete: Cascade)
    score       Decimal?  @db.Decimal(3, 1)
    timeSpent   BigInt?
    offset      Int?
    bookmarked  Boolean   @default(false)

    @@id([userId, videoGameId])
}

model Video {
    id          BigInt         @id @default(dbgenerated("generate_tsid('Video')"))
    title       Json           @db.JsonB // { "languageCode": string[] }
    link        String?        @db.Text
    releaseDate DateTime?      @db.Date
    duration    BigInt?
    channelId   BigInt
    channel     VideoChannel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
    playlistId  BigInt?
    playlist    VideoPlaylist? @relation(fields: [playlistId], references: [id])
    watchedBy   UserVideo[]
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @default(now())
}

model VideoChannel {
    id         BigInt          @id @default(dbgenerated("generate_tsid('VideoChannel')"))
    name       String          @db.Text
    link       String?         @db.Text
    externalId String?         @db.Text
    videos     Video[]
    playlists  VideoPlaylist[]
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @default(now())
}

model VideoGame {
    id          BigInt          @id @default(dbgenerated("generate_tsid('Game')"))
    title       Json            @db.JsonB // { "languageCode": string[] }
    releaseDate DateTime?       @db.Date
    playedBy    UserVideoGame[]
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @default(now())
}

model VideoPlaylist {
    id        BigInt        @id @default(dbgenerated("generate_tsid('VideoPlaylist')"))
    title     String        @db.Text
    link      String?       @db.Text
    videos    Video[]
    channelId BigInt?
    channel   VideoChannel? @relation(fields: [channelId], references: [id], onDelete: Cascade)
    createdAt DateTime      @default(now())
    updatedAt DateTime      @default(now())
}
